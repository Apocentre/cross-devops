apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ipfs.fullname" . }}
  labels:
    {{- include "ipfs.labels" . | nindent 4 }}
  namespace: {{ .Values.ns }}
spec:
  serviceName: {{ template "ipfs.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ipfs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ipfs.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ipfs.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5001
              protocol: TCP
            - name: http-2
              containerPort: 8080
              protocol: TCP
            - name: http-3
              containerPort: 4001
              protocol: TCP
            - name: udp
              containerPort: 4001
              protocol: UDP
          volumeMounts:
            - name: ipfs
              mountPath: /data/ipfs
            - name: ipfs-staging
              mountPath: /export
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: ipfs
        {{- if .Values.persistentVolume.annotations }}
        annotations:
          {{ toYaml .Values.persistentVolume.annotations | indent 10 }}
        {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.ipfs.size }}"
    - metadata:
        name: ipfs-staging
      spec:
        accessModes:
          - ReadWriteOnce
        {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.ipfs_staging.size }}"
  {{- end }}
